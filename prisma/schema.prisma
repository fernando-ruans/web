generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  nome        String
  email       String       @unique
  senha_hash  String
  tipo        String
  avatarUrl   String?
  endereco    String?
  telefone    String?
  createdAt   DateTime     @default(now())
  ativo       Boolean      @default(true)
  addresses   Address[]
  orders      Order[]
  restaurants Restaurant[]
}

model Address {
  id          Int     @id @default(autoincrement())
  userId      Int
  rua         String  @db.VarChar(255)
  numero      String  @db.VarChar(20)
  bairro      String  @db.VarChar(100)
  cidade      String  @db.VarChar(100)
  estado      String  @db.Char(2)
  complemento String? @db.VarChar(255)
  cep         String  @db.VarChar(9)
  user        User    @relation(fields: [userId], references: [id])
  orders      Order[]
  
  @@index([userId])
}

model Restaurant {
  id            Int        @id @default(autoincrement())
  userId        Int
  nome          String
  taxa_entrega  Float
  tempo_entrega Int
  status        String
  imagem        String
  banner        String     @default("/banner-default.png")
  endereco      String?
  telefone      String?
  aberto        Boolean    @default(false)
  cep           String?
  categories    Category[]
  orders        Order[]
  user          User       @relation(fields: [userId], references: [id])
  reviews       Review[]
}

model Category {
  id           Int        @id @default(autoincrement())
  restaurantId Int
  nome         String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  products     Product[]
}

model Product {
  id         Int         @id @default(autoincrement())
  categoryId Int
  nome       String
  descricao  String
  preco      Float
  imagem     String
  ativo      Boolean
  adicionais Adicional[]
  orderItems OrderItem[]
  category   Category    @relation(fields: [categoryId], references: [id])
}

model Order {
  id           Int         @id @default(autoincrement())
  userId       Int
  restaurantId Int
  addressId    Int
  status       String
  total        Float
  data_criacao DateTime    @default(now())
  observacao   String?
  taxa_entrega Float?
  address      Address     @relation(fields: [addressId], references: [id])
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
  orderItems   OrderItem[]
  review       Review?
}

model OrderItem {
  id             Int                  @id @default(autoincrement())
  orderId        Int
  productId      Int
  quantidade     Int
  preco_unitario Float
  order          Order                @relation(fields: [orderId], references: [id])
  product        Product              @relation(fields: [productId], references: [id])
  adicionais     OrderItemAdicional[]
}

model OrderItemAdicional {
  id             Int       @id @default(autoincrement())
  orderItemId    Int
  adicionalId    Int
  quantidade     Int
  preco_unitario Float
  adicional      Adicional @relation(fields: [adicionalId], references: [id])
  orderItem      OrderItem @relation(fields: [orderItemId], references: [id])
}

model Review {
  id           Int         @id @default(autoincrement())
  orderId      Int         @unique
  nota         Int
  comentario   String
  restaurantId Int?
  order        Order       @relation(fields: [orderId], references: [id])
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
}

model Adicional {
  id            Int                  @id @default(autoincrement())
  productId     Int
  nome          String
  preco         Float
  quantidadeMax Int
  product       Product              @relation(fields: [productId], references: [id])
  orderItems    OrderItemAdicional[]
}
